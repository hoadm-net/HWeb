@model HWeb.Models.Product
@{
    ViewData["Title"] = Model.Name;
}

<div class="container">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Trang chủ</a></li>
            <li class="breadcrumb-item"><a asp-controller="Products" asp-action="Index">Sản phẩm</a></li>
            @if (Model.Category != null)
            {
                <li class="breadcrumb-item">@Model.Category.Name</li>
            }
            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
        </ol>
    </nav>

    <div class="row">
        <!-- Product Image -->
        <div class="col-lg-5 mb-4">
            <div class="card">
                <div class="card-body p-0">
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <div class="product-image-container" style="width: 100%; overflow: hidden;">
                            <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid w-100" style="display: block; height: auto;">
                        </div>
                    }
                    else
                    {
                        <div class="bg-light d-flex align-items-center justify-content-center" style="aspect-ratio: 1000/1500;">
                            <i class="fas fa-tshirt text-muted" style="font-size: 5rem;"></i>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Product Information -->
        <div class="col-lg-7">
            <div class="product-info">
                <h1 class="h3 mb-3">@Model.Name</h1>
                
                @if (Model.Category != null)
                {
                    <p class="text-muted mb-2">
                        <i class="fas fa-tag me-2"></i>
                        <strong>Danh mục:</strong> @Model.Category.Name
                    </p>
                }

                <div class="price mb-4">
                    <h2 class="text-primary mb-0">@Model.Price.ToString("N0")đ</h2>
                </div>

                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                {
                    <div class="short-description mb-4">
                        <h5>Mô tả ngắn</h5>
                        <div class="text-muted">@Html.Raw(Model.ShortDescription)</div>
                    </div>
                }

                <!-- Quantity and Add to Cart -->
                <div class="add-to-cart-section mb-4">
                    <form id="addToCartForm">
                        <input type="hidden" id="productId" value="@Model.Id">
                        <div class="row align-items-end">
                            <div class="col-4">
                                <label for="quantity" class="form-label">Số lượng</label>
                                <input type="number" class="form-control" id="quantity" name="quantity" value="1" min="1" max="99">
                            </div>
                            <div class="col-8">
                                <button type="submit" class="btn btn-primary btn-lg w-100" id="addToCartBtn">
                                    <i class="fas fa-shopping-cart me-2"></i>
                                    <span class="btn-text">Thêm vào giỏ hàng</span>
                                    <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>

                <!-- Product Tags -->
                @if (Model.ProductTags != null && Model.ProductTags.Any())
                {
                    <div class="product-tags mb-4">
                        <h6>Thẻ sản phẩm</h6>
                        @foreach (var productTag in Model.ProductTags)
                        {
                            <span class="badge bg-secondary me-2 mb-2">@productTag.Tag.Name</span>
                        }
                    </div>
                }

                <!-- Product Actions -->
                <div class="product-actions">
                    <div class="row g-2">
                        <div class="col-6">
                            <button class="btn btn-outline-danger w-100" onclick="alert('Chức năng đang phát triển')">
                                <i class="fas fa-heart me-2"></i>
                                Yêu thích
                            </button>
                        </div>
                        <div class="col-6">
                            <button class="btn btn-outline-info w-100" onclick="alert('Chức năng đang phát triển')">
                                <i class="fas fa-share me-2"></i>
                                Chia sẻ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Details Tab -->
    <div class="row mt-5">
        <div class="col-12">
            <ul class="nav nav-tabs" id="productTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="description-tab" data-bs-toggle="tab" data-bs-target="#description" type="button" role="tab">
                        Mô tả chi tiết
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="specifications-tab" data-bs-toggle="tab" data-bs-target="#specifications" type="button" role="tab">
                        Thông số kỹ thuật
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="reviews-tab" data-bs-toggle="tab" data-bs-target="#reviews" type="button" role="tab">
                        Đánh giá
                    </button>
                </li>
            </ul>
            <div class="tab-content border border-top-0 p-4" id="productTabContent">
                <div class="tab-pane fade show active" id="description" role="tabpanel">
                    @if (!string.IsNullOrEmpty(Model.DetailDescription))
                    {
                        <div class="product-description">
                            @Html.Raw(Model.DetailDescription)
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Chưa có mô tả chi tiết cho sản phẩm này.</p>
                    }
                </div>
                <div class="tab-pane fade" id="specifications" role="tabpanel">
                    <div class="specifications">
                        <table class="table table-striped">
                            <tbody>
                                <tr>
                                    <td><strong>Mã sản phẩm</strong></td>
                                    <td>SP-@Model.Id.ToString("D6")</td>
                                </tr>
                                <tr>
                                    <td><strong>Danh mục</strong></td>
                                    <td>@(Model.Category?.Name ?? "Chưa phân loại")</td>
                                </tr>
                                <tr>
                                    <td><strong>Giá bán</strong></td>
                                    <td>@Model.Price.ToString("N0")đ</td>
                                </tr>
                                <tr>
                                    <td><strong>Trạng thái</strong></td>
                                    <td><span class="badge bg-success">Còn hàng</span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="tab-pane fade" id="reviews" role="tabpanel">
                    <div class="reviews">
                        <!-- Reviews Summary -->
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <div class="text-center">
                                    <div class="rating-summary">
                                        <h2 class="display-4 mb-1">@Model.AverageRating.ToString("F1")</h2>
                                        <div class="stars mb-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <i class="fas fa-star @(i <= Math.Round(Model.AverageRating) ? "text-warning" : "text-muted")"></i>
                                            }
                                        </div>
                                        <p class="text-muted">@Model.ReviewCount đánh giá</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-8">
                                @if (Model.ReviewCount > 0)
                                {
                                    <!-- Rating Distribution -->
                                    @for (int star = 5; star >= 1; star--)
                                    {
                                        var count = Model.Reviews.Count(r => r.IsApproved && r.Rating == star);
                                        var percentage = Model.ReviewCount > 0 ? (count * 100.0 / Model.ReviewCount) : 0;
                                        <div class="d-flex align-items-center mb-1">
                                            <span class="me-2">@star sao</span>
                                            <div class="progress flex-grow-1 me-2" style="height: 8px;">
                                                <div class="progress-bar bg-warning" role="progressbar" 
                                                     style="width: @percentage%"></div>
                                            </div>
                                            <span class="text-muted small">@count</span>
                                        </div>
                                    }
                                }
                            </div>
                        </div>

                        <!-- Add Review Form -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Viết đánh giá</h5>
                            </div>
                            <div class="card-body">
                                <form id="addReviewForm">
                                    <input type="hidden" id="reviewProductId" value="@Model.Id">
                                    
                                    @if (!User.Identity.IsAuthenticated)
                                    {
                                        <div class="mb-3">
                                            <label for="customerName" class="form-label">Tên của bạn</label>
                                            <input type="text" class="form-control" id="customerName" required>
                                        </div>
                                    }
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Đánh giá của bạn</label>
                                        <div class="rating-input">
                                            @for (int i = 5; i >= 1; i--)
                                            {
                                                <input type="radio" name="rating" id="star@(i)" value="@i" class="d-none">
                                                <label for="star@(i)" class="star-label">
                                                    <i class="fas fa-star"></i>
                                                </label>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label for="reviewTitle" class="form-label">Tiêu đề</label>
                                        <input type="text" class="form-control" id="reviewTitle" maxlength="200" required>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label for="reviewComment" class="form-label">Nội dung đánh giá</label>
                                        <textarea class="form-control" id="reviewComment" rows="4" maxlength="1000" required></textarea>
                                    </div>
                                    
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-paper-plane me-2"></i>
                                        Gửi đánh giá
                                    </button>
                                </form>
                            </div>
                        </div>

                        <!-- Reviews List -->
                        <div class="reviews-list">
                            @if (Model.Reviews.Any(r => r.IsApproved))
                            {
                                @foreach (var review in Model.Reviews.Where(r => r.IsApproved).OrderByDescending(r => r.CreatedAt))
                                {
                                    <div class="card mb-3">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <div>
                                                    <h6 class="mb-1">@review.CustomerName</h6>
                                                    <div class="stars mb-1">
                                                        @for (int i = 1; i <= 5; i++)
                                                        {
                                                            <i class="fas fa-star @(i <= review.Rating ? "text-warning" : "text-muted") fa-sm"></i>
                                                        }
                                                    </div>
                                                </div>
                                                <small class="text-muted">@review.CreatedAt.ToString("dd/MM/yyyy")</small>
                                            </div>
                                            <h6 class="card-title">@review.Title</h6>
                                            <p class="card-text">@review.Comment</p>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="fas fa-comments text-muted fa-3x mb-3"></i>
                                    <p class="text-muted">Chưa có đánh giá nào cho sản phẩm này.</p>
                                    <p class="text-muted">Hãy là người đầu tiên đánh giá!</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Related Products -->
    <div class="row mt-5">
        <div class="col-12">
            <h3 class="mb-4">Sản phẩm liên quan</h3>
            @if (ViewBag.RelatedProducts != null && ((List<Product>)ViewBag.RelatedProducts).Any())
            {
                <div class="row">
                    @foreach (var relatedProduct in (List<Product>)ViewBag.RelatedProducts)
                    {
                        <div class="col-lg-3 col-md-6 mb-4">
                            <div class="card h-100 product-card">
                                <div class="card-img-container">
                                    @if (!string.IsNullOrEmpty(relatedProduct.ImageUrl))
                                    {
                                        <img src="@relatedProduct.ImageUrl" class="card-img-top" alt="@relatedProduct.Name" style="height: 250px; object-fit: cover;">
                                    }
                                    else
                                    {
                                        <div class="card-img-placeholder d-flex align-items-center justify-content-center bg-light" style="height: 250px;">
                                            <i class="fas fa-tshirt text-muted fa-3x"></i>
                                        </div>
                                    }
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h6 class="card-title">@relatedProduct.Name</h6>
                                    @if (relatedProduct.Category != null)
                                    {
                                        <small class="text-muted mb-2">@relatedProduct.Category.Name</small>
                                    }
                                    <p class="card-text text-muted small flex-grow-1">
                                        @if (!string.IsNullOrEmpty(relatedProduct.ShortDescription))
                                        {
                                            @(relatedProduct.ShortDescription.Length > 80 ? relatedProduct.ShortDescription.Substring(0, 80) + "..." : relatedProduct.ShortDescription)
                                        }
                                    </p>
                                    <div class="d-flex justify-content-between align-items-center mt-2">
                                        <h6 class="text-primary mb-0">@relatedProduct.Price.ToString("N0")đ</h6>
                                        @if (relatedProduct.Reviews.Any())
                                        {
                                            <div class="rating">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star @(i <= Math.Round(relatedProduct.AverageRating) ? "text-warning" : "text-muted") fa-sm"></i>
                                                }
                                                <small class="text-muted ms-1">(@relatedProduct.ReviewCount)</small>
                                            </div>
                                        }
                                    </div>
                                    <a asp-action="Details" asp-route-id="@relatedProduct.Id" class="btn btn-outline-primary btn-sm mt-2">
                                        <i class="fas fa-eye me-1"></i>
                                        Xem chi tiết
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="fas fa-box-open text-muted fa-3x mb-3"></i>
                    <p class="text-muted">Không có sản phẩm liên quan nào được tìm thấy.</p>
                    <a asp-action="Index" class="btn btn-primary">
                        <i class="fas fa-arrow-left me-2"></i>
                        Xem tất cả sản phẩm
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Add to cart functionality
        document.getElementById('addToCartForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const productId = document.getElementById('productId').value;
            const quantity = document.getElementById('quantity').value;
            const addToCartBtn = document.getElementById('addToCartBtn');
            const spinner = addToCartBtn.querySelector('.spinner-border');
            const btnText = addToCartBtn.querySelector('.btn-text');
            
            // Show loading spinner
            spinner.classList.remove('d-none');
            btnText.classList.add('d-none');
            addToCartBtn.disabled = true;
            
            // Add to cart via AJAX
            $.ajax({
                url: '@Url.Action("AddToCart", "Cart")',
                type: 'POST',
                data: {
                    productId: productId,
                    quantity: quantity
                },
                success: function(response) {
                    if (response.success) {
                        // Show success message
                        showToast('success', response.message);
                        
                        // Update cart count in navbar
                        updateCartCount(response.cartCount);
                        
                        // Reset form
                        document.getElementById('quantity').value = 1;
                    } else {
                        showToast('error', response.message);
                    }
                },
                error: function() {
                    showToast('error', 'Có lỗi xảy ra. Vui lòng thử lại.');
                },
                complete: function() {
                    // Hide loading spinner
                    spinner.classList.add('d-none');
                    btnText.classList.remove('d-none');
                    addToCartBtn.disabled = false;
                }
            });
        });

        // Add review functionality
        document.getElementById('addReviewForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const productId = document.getElementById('reviewProductId').value;
            const rating = document.querySelector('input[name="rating"]:checked')?.value;
            const title = document.getElementById('reviewTitle').value;
            const comment = document.getElementById('reviewComment').value;
            const customerName = document.getElementById('customerName')?.value;
            
            // Validation
            if (!rating) {
                showToast('error', 'Vui lòng chọn số sao đánh giá.');
                return;
            }
            
            if (!title.trim()) {
                showToast('error', 'Vui lòng nhập tiêu đề đánh giá.');
                return;
            }
            
            if (!comment.trim()) {
                showToast('error', 'Vui lòng nhập nội dung đánh giá.');
                return;
            }
            
            // Submit review via AJAX
            $.ajax({
                url: '@Url.Action("AddReview", "Products")',
                type: 'POST',
                data: {
                    productId: productId,
                    rating: rating,
                    title: title,
                    comment: comment,
                    customerName: customerName
                },
                success: function(response) {
                    if (response.success) {
                        showToast('success', response.message);
                        
                        // Reset form
                        document.getElementById('addReviewForm').reset();
                        document.querySelectorAll('.star-label').forEach(label => {
                            label.classList.remove('active');
                        });
                    } else {
                        showToast('error', response.message);
                    }
                },
                error: function() {
                    showToast('error', 'Có lỗi xảy ra. Vui lòng thử lại.');
                }
            });
        });

        // Star rating interaction
        document.querySelectorAll('.star-label').forEach((label, index) => {
            label.addEventListener('click', function() {
                const rating = this.previousElementSibling.value;
                
                // Reset all stars to gray first
                document.querySelectorAll('.star-label').forEach(l => {
                    l.classList.remove('active');
                });
                
                // Set selected stars to yellow (from right to left due to flex-direction: row-reverse)
                document.querySelectorAll('.star-label').forEach(l => {
                    if (l.previousElementSibling.value <= rating) {
                        l.classList.add('active');
                    }
                });
            });
            
            label.addEventListener('mouseenter', function() {
                const rating = this.previousElementSibling.value;
                
                // Reset hover effect
                document.querySelectorAll('.star-label').forEach(l => l.classList.remove('hover'));
                
                // Highlight stars on hover
                document.querySelectorAll('.star-label').forEach(l => {
                    if (l.previousElementSibling.value <= rating) {
                        l.classList.add('hover');
                    }
                });
            });
        });

        document.querySelector('.rating-input').addEventListener('mouseleave', function() {
            // Remove hover effect
            document.querySelectorAll('.star-label').forEach(l => l.classList.remove('hover'));
        });

        function updateCartCount(count) {
            const cartCountElements = document.querySelectorAll('.cart-count');
            cartCountElements.forEach(element => {
                element.textContent = count;
                if (count > 0) {
                    element.style.display = 'inline';
                } else {
                    element.style.display = 'none';
                }
            });
        }

        function showToast(type, message) {
            // Simple toast implementation
            const toastClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const toast = document.createElement('div');
            toast.className = `alert ${toastClass} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(toast);
            
            // Auto remove after 3 seconds
            setTimeout(function() {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 3000);
        }
    </script>
    
    <style>
        .rating-input {
            display: flex;
            flex-direction: row-reverse;
            justify-content: flex-end;
        }
        
        .star-label {
            cursor: pointer;
            font-size: 1.5rem;
            color: #ddd;
            margin-right: 5px;
            transition: color 0.2s;
        }
        
        .star-label:hover,
        .star-label.hover {
            color: #ffc107;
        }
        
        .star-label.active {
            color: #ffc107;
        }
        
        .rating-input input[type="radio"]:checked ~ .star-label {
            color: #ffc107;
        }
        
        .product-card {
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
    </style>
}
